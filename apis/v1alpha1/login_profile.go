// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LoginProfileSpec defines the desired state of LoginProfile.
//
// Contains the user name and password create date for a user.
//
// This data type is used as a response element in the CreateLoginProfile and
// GetLoginProfile operations.
type LoginProfileSpec struct {

	// The name of the IAM user to create a password for. The user must already
	// exist.
	//
	// This parameter is optional. If no user name is included, it defaults to the
	// principal making the request. When you make this request with root user credentials,
	// you must use an AssumeRoot (https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoot.html)
	// session to omit the user name.
	//
	// This parameter allows (through its regex pattern (http://wikipedia.org/wiki/regex))
	// a string of characters consisting of upper and lowercase alphanumeric characters
	// with no spaces. You can also include any of the following characters: _+=,.@-
	//
	// Regex Pattern: `^[\w+=,.@-]+$`
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	Name *string `json:"name,omitempty"`
	// The new password for the user.
	//
	// This parameter must be omitted when you make the request with an AssumeRoot
	// (https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoot.html)
	// session. It is required in all other cases.
	//
	// The regex pattern (http://wikipedia.org/wiki/regex) that is used to validate
	// this parameter is a string of characters. That string can include almost
	// any printable ASCII character from the space (\u0020) through the end of
	// the ASCII character range (\u00FF). You can also include the tab (\u0009),
	// line feed (\u000A), and carriage return (\u000D) characters. Any of these
	// characters are valid in a password. However, many tools, such as the Amazon
	// Web Services Management Console, might restrict the ability to type certain
	// characters because they have special meaning within that tool.
	//
	// Regex Pattern: `^[\u0009\u000A\u000D\u0020-\u00FF]+$`
	Password *string `json:"password,omitempty"`
	// Specifies whether the user is required to set a new password on next sign-in.
	PasswordResetRequired *bool `json:"passwordResetRequired,omitempty"`
}

// LoginProfileStatus defines the observed state of LoginProfile
type LoginProfileStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The date when the password for the user was created.
	// +kubebuilder:validation:Optional
	CreateDate *metav1.Time `json:"createDate,omitempty"`
}

// LoginProfile is the Schema for the LoginProfiles API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type LoginProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoginProfileSpec   `json:"spec,omitempty"`
	Status            LoginProfileStatus `json:"status,omitempty"`
}

// LoginProfileList contains a list of LoginProfile
// +kubebuilder:object:root=true
type LoginProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoginProfile `json:"items"`
}

func init() {
	SchemeBuilder.Register(&LoginProfile{}, &LoginProfileList{})
}
